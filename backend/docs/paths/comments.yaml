  comments:
    get:
      tags:
        - Comment
      summary: Get all comments
      operationId: getAllComments
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of comments per page
        - in: query
          name: sortBy
          schema:
            type: string
            enum: ['createdAt', 'updatedAt', 'content']
            default: 'createdAt'
          description: Field to sort comments by
        - in: query
          name: content
          schema:
            type: string
          description: Filter comments by content
        - in: query
          name: authorLogin
          schema:
            type: string
          description: Filter comments by author login
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '../components/schemas/Comment.yaml#/Comment'

    # post:
    #   tags:
    #     - Comment
    #   summary: Create a new comment
    #   operationId: createComment
    #   security:
    #     - bearerAuth: []
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '../components/schemas/Comment.yaml#/Comment'
    #   responses:
    #     '201':
    #       description: Comment successfully created
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '../components/schemas/Comment.yaml#/Comment'
    #     '400':
    #       description: Bad request or validation error
    #     '401':
    #       description: Unauthorized

  comment:
    get:
      tags:
        - Comment
      summary: Get a comment by ID
      operationId: getCommentById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: comment_id
          required: true
          schema:
            type: string
          description: ID of the comment
      responses:
        '200':
          description: The requested comment
          content:
            application/json:
              schema:
                $ref: '../components/schemas/Comment.yaml#/Comment'
        '404':
          description: Comment not found

    patch:
      tags:
        - Comment
      summary: Update a comment by ID
      operationId: updateComment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: comment_id
          required: true
          schema:
            type: string
          description: ID of the comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '../components/schemas/Comment.yaml#/Comment'
      responses:
        '200':
          description: Successfully updated comment
          content:
            application/json:
              schema:
                $ref: '../components/schemas/Comment.yaml#/Comment'
        '400':
          description: Invalid data
        '401':
          description: Unauthorized
        '404':
          description: Comment not found

    delete:
      tags:
        - Comment
      summary: Delete a comment by ID
      operationId: deleteComment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: comment_id
          required: true
          schema:
            type: string
          description: ID of the comment
      responses:
        '200':
          description: Comment successfully deleted
        '401':
          description: Unauthorized
        '404':
          description: Comment not found

  commentEvent:
    get:
      tags:
        - Comment
      summary: Get event associated with a comment
      operationId: getEventByCommentId
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: comment_id
          required: true
          schema:
            type: string
          description: ID of the comment
      responses:
        '200':
          description: The event related to the comment
          content:
            application/json:
              schema:
                $ref: '../components/schemas/Event.yaml#/Event'
        '404':
          description: Comment or event not found
