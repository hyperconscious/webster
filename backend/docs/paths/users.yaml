users:
  get:
    tags:
      - User
    summary: Retrieve a list of all users
    description: Fetches a list of users with optional query parameters for pagination and filtering.
    parameters:
      - name: page
        in: query
        description: Page number for pagination (minimum 1)
        required: false
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page (1-100)
        required: false
        schema:
          type: integer
          default: 10
      - name: sortField
        in: query
        description: Field to sort by (e.g., `createdAt`, `publisher_rating`)
        required: false
        schema:
          type: string
      - name: sortDirection
        in: query
        description: Sort direction, either ASC or DESC
        required: false
        schema:
          type: string
          enum: [ASC, DESC]
          default: ASC
      - name: search
        in: query
        description: Search term to match across login or full name
        required: false
        schema:
          type: string
          minLength: 3
    responses:
      200:
        description: List of users
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "../components/schemas/user.yaml#/User"
      401:
        $ref: "../components/responses/Unauthorized.yaml"
    security:
      - bearerAuth: []

user:
  get:
    tags:
      - User
    summary: Retrieve a user by ID
    description: Fetches a user by their unique ID.
    parameters:
      - name: id
        in: path
        required: true
        description: Unique identifier of the user
        schema:
          type: integer
          example: 1
    responses:
      200:
        description: User details
        content:
          application/json:
            schema:
              $ref: "../components/schemas/user.yaml#/User"
      400:
        $ref: "../components/responses/BadRequest.yaml"
      401:
        $ref: "../components/responses/Unauthorized.yaml"
      404:
        $ref: "../components/responses/NotFound.yaml"
    security:
      - bearerAuth: []
  patch:
    tags:
      - User
    summary: Update user details
    description: Updates the user's profile information.
    parameters:
      - name: id
        in: path
        required: true
        description: Unique identifier of the user
        schema:
          type: integer
          example: 1
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              login:
                type: string
                example: "updatedUserLogin"
              full_name:
                type: string
                example: "Updated Name"
              email:
                type: string
                format: email
                example: "test@gmail.com"
              password:
                type: string
                example: "UpdatedPassword123"
              passwordConfirmation:
                type: string
                example: "UpdatedPassword123"
              avatar:
                type: string
                format: binary
                description: Base64 encoded image data for the avatar
    responses:
      200:
        description: User updated successfully
        content:
          application/json:
            schema:
              $ref: "../components/schemas/user.yaml#/User"
      400:
        $ref: "../components/responses/BadRequest.yaml"
      401:
        $ref: "../components/responses/Unauthorized.yaml"
      404:
        $ref: "../components/responses/NotFound.yaml"
  delete:
    tags:
      - User
    summary: Delete a user by ID
    description: Deletes a user from the system.
    parameters:
      - name: id
        in: path
        required: true
        description: Unique identifier of the user
        schema:
          type: integer
          example: 1
    responses:
      200:
        description: User deleted successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "User deleted successfully."
      400:
        $ref: "../components/responses/BadRequest.yaml"
      401:
        $ref: "../components/responses/Unauthorized.yaml"
      404:
        $ref: "../components/responses/NotFound.yaml"
    security:
      - bearerAuth: []

my-profile:
  get:
    tags:
      - User
    summary: Retrieve the current user's profile
    description: Fetches the profile of the currently authenticated user.
    responses:
      200:
        description: Current user's profile
        content:
          application/json:
            schema:
              $ref: "../components/schemas/user.yaml#/User"
      401:
        $ref: "../components/responses/Unauthorized.yaml"
    security:
      - bearerAuth: []
mail:
  get:
    tags:
      - User
    summary: Retrieve a user by email
    description: Fetches a user by their email address.
    parameters:
      - name: email
        in: path
        required: true
        description: Unique email of the user
        schema:
          type: string
          format: email
          example: "test@gmail.com"
    responses:
      200:
        description: User details
        content:
          application/json:
            schema:
              $ref: "../components/schemas/user.yaml#/User"
      400:
        $ref: "../components/responses/BadRequest.yaml"
      401:
        $ref: "../components/responses/Unauthorized.yaml"
      404:
        $ref: "../components/responses/NotFound.yaml"
    security:
      - bearerAuth: []

attendedEvents:
  get:
    tags:
      - User
    summary: Retrieve events attended by a user
    description: Fetches a list of events that the user has attended.
    parameters:
      - name: id
        in: path
        required: true
        description: Unique identifier of the user
        schema:
          type: integer
          example: 1
      - name: page
        in: query
        description: Page number for pagination (minimum 1)
        required: false
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page (1-100)
        required: false
        schema:
          type: integer
          default: 10
    responses:
      200:
        description: List of attended events
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "../components/schemas/event.yaml#/Event"
      400:
        $ref: "../components/responses/BadRequest.yaml"
      401:
        $ref: "../components/responses/Unauthorized.yaml"
      404:
        $ref: "../components/responses/NotFound.yaml"
    security:
      - bearerAuth: []
companies:
  get:
    tags:
      - User
    summary: Retrieve companies associated with a user
    description: Fetches a list of companies that the user is associated with.
    parameters:
      - name: id
        in: path
        required: true
        description: Unique identifier of the user
        schema:
          type: integer
          example: 1
      - name: page
        in: query
        description: Page number for pagination (minimum 1)
        required: false
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page (1-100)
        required: false
        schema:
          type: integer
          default: 10
    responses:
      200:
        description: List of companies associated with the user
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "../components/schemas/company.yaml#/Company"
      400:
        $ref: "../components/responses/BadRequest.yaml"
      401:
        $ref: "../components/responses/Unauthorized.yaml"
      404:
        $ref: "../components/responses/NotFound.yaml"
    security:
      - bearerAuth: []
participatedIn:
  get:
    tags:
      - User
    summary: Retrieve events participated in by a user
    description: Fetches a list of events that the user has participated in.
    parameters:
      - name: id
        in: path
        required: true
        description: Unique identifier of the user
        schema:
          type: integer
          example: 1
      - name: page
        in: query
        description: Page number for pagination (minimum 1)
        required: false
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of items per page (1-100)
        required: false
        schema:
          type: integer
          default: 10
    responses:
      200:
        description: List of participated events
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "../components/schemas/event.yaml#/Event"
      400:
        $ref: "../components/responses/BadRequest.yaml"
      401:
        $ref: "../components/responses/Unauthorized.yaml"
      404:
        $ref: "../components/responses/NotFound.yaml"
    security:
      - bearerAuth: []
participation:
    post:
      tags:
        - User
      summary: Add a user to an event's participation list
      description: Adds the user to the event's participation list.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  type: integer
                  example: 1
      responses:
        200:
          description: User added to participation list successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User added to participation list successfully."
        400:
          $ref: "../components/responses/BadRequest.yaml"
        401:
          $ref: "../components/responses/Unauthorized.yaml"
        404:
          $ref: "../components/responses/NotFound.yaml"
      security:
        - bearerAuth: []